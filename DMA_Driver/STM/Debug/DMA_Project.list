
DMA_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000798  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800092c  0800092c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800092c  0800092c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800092c  0800092c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800092c  0800092c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08000934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200000a0  080009d4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080009d4  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009ab  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003e2  00000000  00000000  00020a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00020e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00020f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de99  00000000  00000000  00020fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c8a  00000000  00000000  0002ee81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050087  00000000  00000000  0002fb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fb92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000234  00000000  00000000  0007fbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000914 	.word	0x08000914

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a4 	.word	0x200000a4
 80001d0:	08000914 	.word	0x08000914

080001d4 <DMA_init>:
unsigned int *DMA_registers [2][10] = {{DMA1_LISR, DMA1_HISR, DMA1_LIFCR, DMA1_HIFCR, DMA1_S0CR,
						  DMA1_S0NDTR, DMA1_S0PAR,DMA1_S0M0AR, DMA1_S0M1AR, DMA1_S0FCR},
		{DMA2_LISR, DMA2_HISR, DMA2_LIFCR, DMA2_HIFCR, DMA2_S0CR,
								  DMA2_S0NDTR, DMA2_S0PAR,DMA2_S0M0AR, DMA2_S0M1AR, DMA2_S0FCR}};
void DMA_init(int DMA)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	DMA_number = DMA;
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <DMA_init+0x54>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6013      	str	r3, [r2, #0]
	switch (DMA)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d003      	beq.n	80001f0 <DMA_init+0x1c>
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d00b      	beq.n	8000206 <DMA_init+0x32>
		RCC_AHB1ENR |= 1 << 22;  //enable DMA2 clock
		*NVIC_ISER1	 = 1<<24;  // enable line 56 in NVIC in NVIC_ISER1 (which is bit 24 in the register)
		break;
	}

}
 80001ee:	e015      	b.n	800021c <DMA_init+0x48>
		RCC_AHB1ENR |= 1 << 21;					// enable DMA1 clock
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <DMA_init+0x58>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <DMA_init+0x58>)
 80001f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001fa:	6013      	str	r3, [r2, #0]
		*NVIC_ISER0	 = 1<<11;  					//enable line 11 in NVIC_ISER0
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <DMA_init+0x5c>)
 80001fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000202:	601a      	str	r2, [r3, #0]
		break;
 8000204:	e00a      	b.n	800021c <DMA_init+0x48>
		RCC_AHB1ENR |= 1 << 22;  //enable DMA2 clock
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <DMA_init+0x58>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a08      	ldr	r2, [pc, #32]	; (800022c <DMA_init+0x58>)
 800020c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000210:	6013      	str	r3, [r2, #0]
		*NVIC_ISER1	 = 1<<24;  // enable line 56 in NVIC in NVIC_ISER1 (which is bit 24 in the register)
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <DMA_init+0x60>)
 8000214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000218:	601a      	str	r2, [r3, #0]
		break;
 800021a:	bf00      	nop
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	200000bc 	.word	0x200000bc
 800022c:	40023830 	.word	0x40023830
 8000230:	e000e100 	.word	0xe000e100
 8000234:	e000e104 	.word	0xe000e104

08000238 <double_check>:
int double_check()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	*DMA_registers[DMA_number][2] |= (1<<4);
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <double_check+0x58>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4914      	ldr	r1, [pc, #80]	; (8000294 <double_check+0x5c>)
 8000242:	4613      	mov	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	440b      	add	r3, r1
 800024c:	3308      	adds	r3, #8
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	6819      	ldr	r1, [r3, #0]
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <double_check+0x58>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	480f      	ldr	r0, [pc, #60]	; (8000294 <double_check+0x5c>)
 8000258:	4613      	mov	r3, r2
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	4413      	add	r3, r2
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	4403      	add	r3, r0
 8000262:	3308      	adds	r3, #8
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f041 0210 	orr.w	r2, r1, #16
 800026a:	601a      	str	r2, [r3, #0]
	return (int)(*DMA_registers[DMA_number][0] & 0x20);
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <double_check+0x58>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4908      	ldr	r1, [pc, #32]	; (8000294 <double_check+0x5c>)
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	440b      	add	r3, r1
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 0320 	and.w	r3, r3, #32
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	200000bc 	.word	0x200000bc
 8000294:	20000000 	.word	0x20000000

08000298 <DMA_param>:

void DMA_param(int *src,int *dest,int n,unsigned char trans_size,unsigned char trans_mode,unsigned char trans_type)
{
 8000298:	b490      	push	{r4, r7}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
 80002a4:	70fb      	strb	r3, [r7, #3]
	*DMA_registers[DMA_number][4] = 0;
 80002a6:	4b6a      	ldr	r3, [pc, #424]	; (8000450 <DMA_param+0x1b8>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	496a      	ldr	r1, [pc, #424]	; (8000454 <DMA_param+0x1bc>)
 80002ac:	4613      	mov	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	440b      	add	r3, r1
 80002b6:	3310      	adds	r3, #16
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][4] 	|= (trans_mode << 6);		// memory to memory
 80002be:	4b64      	ldr	r3, [pc, #400]	; (8000450 <DMA_param+0x1b8>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4964      	ldr	r1, [pc, #400]	; (8000454 <DMA_param+0x1bc>)
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	440b      	add	r3, r1
 80002ce:	3310      	adds	r3, #16
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	6819      	ldr	r1, [r3, #0]
 80002d4:	7e3b      	ldrb	r3, [r7, #24]
 80002d6:	019b      	lsls	r3, r3, #6
 80002d8:	461c      	mov	r4, r3
 80002da:	4b5d      	ldr	r3, [pc, #372]	; (8000450 <DMA_param+0x1b8>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	485d      	ldr	r0, [pc, #372]	; (8000454 <DMA_param+0x1bc>)
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4403      	add	r3, r0
 80002ea:	3310      	adds	r3, #16
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	ea41 0204 	orr.w	r2, r1, r4
 80002f2:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][6]	 = (uint32_t)src;   // source address
 80002f4:	4b56      	ldr	r3, [pc, #344]	; (8000450 <DMA_param+0x1b8>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4956      	ldr	r1, [pc, #344]	; (8000454 <DMA_param+0x1bc>)
 80002fa:	4613      	mov	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	440b      	add	r3, r1
 8000304:	3318      	adds	r3, #24
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][7]  = (uint32_t) dest;	// destination address
 800030c:	4b50      	ldr	r3, [pc, #320]	; (8000450 <DMA_param+0x1b8>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4950      	ldr	r1, [pc, #320]	; (8000454 <DMA_param+0x1bc>)
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	440b      	add	r3, r1
 800031c:	331c      	adds	r3, #28
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][5]	 = n;				// number of transfers
 8000324:	4b4a      	ldr	r3, [pc, #296]	; (8000450 <DMA_param+0x1b8>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	494a      	ldr	r1, [pc, #296]	; (8000454 <DMA_param+0x1bc>)
 800032a:	4613      	mov	r3, r2
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	4413      	add	r3, r2
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	440b      	add	r3, r1
 8000334:	3314      	adds	r3, #20
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][4] 	|= (trans_size << 11);		// trans_size
 800033c:	4b44      	ldr	r3, [pc, #272]	; (8000450 <DMA_param+0x1b8>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4944      	ldr	r1, [pc, #272]	; (8000454 <DMA_param+0x1bc>)
 8000342:	4613      	mov	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4413      	add	r3, r2
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	440b      	add	r3, r1
 800034c:	3310      	adds	r3, #16
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6819      	ldr	r1, [r3, #0]
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	02db      	lsls	r3, r3, #11
 8000356:	461c      	mov	r4, r3
 8000358:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <DMA_param+0x1b8>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	483d      	ldr	r0, [pc, #244]	; (8000454 <DMA_param+0x1bc>)
 800035e:	4613      	mov	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	00db      	lsls	r3, r3, #3
 8000366:	4403      	add	r3, r0
 8000368:	3310      	adds	r3, #16
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	ea41 0204 	orr.w	r2, r1, r4
 8000370:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][4] 	|= (trans_size << 13);		// trans_size
 8000372:	4b37      	ldr	r3, [pc, #220]	; (8000450 <DMA_param+0x1b8>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	4937      	ldr	r1, [pc, #220]	; (8000454 <DMA_param+0x1bc>)
 8000378:	4613      	mov	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	440b      	add	r3, r1
 8000382:	3310      	adds	r3, #16
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	6819      	ldr	r1, [r3, #0]
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	035b      	lsls	r3, r3, #13
 800038c:	461c      	mov	r4, r3
 800038e:	4b30      	ldr	r3, [pc, #192]	; (8000450 <DMA_param+0x1b8>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4830      	ldr	r0, [pc, #192]	; (8000454 <DMA_param+0x1bc>)
 8000394:	4613      	mov	r3, r2
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4413      	add	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	4403      	add	r3, r0
 800039e:	3310      	adds	r3, #16
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	ea41 0204 	orr.w	r2, r1, r4
 80003a6:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][4]   |= (0x03 << 9);			// increment mode according to MSIZE and PSIZE
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <DMA_param+0x1b8>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4929      	ldr	r1, [pc, #164]	; (8000454 <DMA_param+0x1bc>)
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	440b      	add	r3, r1
 80003b8:	3310      	adds	r3, #16
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	4b24      	ldr	r3, [pc, #144]	; (8000450 <DMA_param+0x1b8>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4824      	ldr	r0, [pc, #144]	; (8000454 <DMA_param+0x1bc>)
 80003c4:	4613      	mov	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	4413      	add	r3, r2
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	4403      	add	r3, r0
 80003ce:	3310      	adds	r3, #16
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f441 62c0 	orr.w	r2, r1, #1536	; 0x600
 80003d6:	601a      	str	r2, [r3, #0]

	*DMA_registers[DMA_number][4]   |= (trans_type << 21);			// PBURST single
 80003d8:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <DMA_param+0x1b8>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	491d      	ldr	r1, [pc, #116]	; (8000454 <DMA_param+0x1bc>)
 80003de:	4613      	mov	r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	00db      	lsls	r3, r3, #3
 80003e6:	440b      	add	r3, r1
 80003e8:	3310      	adds	r3, #16
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	7f3b      	ldrb	r3, [r7, #28]
 80003f0:	055b      	lsls	r3, r3, #21
 80003f2:	461c      	mov	r4, r3
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <DMA_param+0x1b8>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <DMA_param+0x1bc>)
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	00db      	lsls	r3, r3, #3
 8000402:	4403      	add	r3, r0
 8000404:	3310      	adds	r3, #16
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	ea41 0204 	orr.w	r2, r1, r4
 800040c:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][4]   |= (trans_type << 23);			// MBURST single
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <DMA_param+0x1b8>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4910      	ldr	r1, [pc, #64]	; (8000454 <DMA_param+0x1bc>)
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	440b      	add	r3, r1
 800041e:	3310      	adds	r3, #16
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	7f3b      	ldrb	r3, [r7, #28]
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	461c      	mov	r4, r3
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <DMA_param+0x1b8>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <DMA_param+0x1bc>)
 8000430:	4613      	mov	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	4413      	add	r3, r2
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	4403      	add	r3, r0
 800043a:	3310      	adds	r3, #16
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	ea41 0204 	orr.w	r2, r1, r4
 8000442:	601a      	str	r2, [r3, #0]

}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bc90      	pop	{r4, r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	200000bc 	.word	0x200000bc
 8000454:	20000000 	.word	0x20000000

08000458 <DMA_start>:
void DMA_start()
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	*DMA_registers[DMA_number][4]	|= (0x01 << 4);			// Transfer complete interrupt enable
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <DMA_start+0x70>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	491a      	ldr	r1, [pc, #104]	; (80004cc <DMA_start+0x74>)
 8000462:	4613      	mov	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4413      	add	r3, r2
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	440b      	add	r3, r1
 800046c:	3310      	adds	r3, #16
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6819      	ldr	r1, [r3, #0]
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <DMA_start+0x70>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4815      	ldr	r0, [pc, #84]	; (80004cc <DMA_start+0x74>)
 8000478:	4613      	mov	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4413      	add	r3, r2
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	4403      	add	r3, r0
 8000482:	3310      	adds	r3, #16
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f041 0210 	orr.w	r2, r1, #16
 800048a:	601a      	str	r2, [r3, #0]
	*DMA_registers[DMA_number][4]	|= 1;					// enable stream 0
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <DMA_start+0x70>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	490e      	ldr	r1, [pc, #56]	; (80004cc <DMA_start+0x74>)
 8000492:	4613      	mov	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4413      	add	r3, r2
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	440b      	add	r3, r1
 800049c:	3310      	adds	r3, #16
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <DMA_start+0x70>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4809      	ldr	r0, [pc, #36]	; (80004cc <DMA_start+0x74>)
 80004a8:	4613      	mov	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	4403      	add	r3, r0
 80004b2:	3310      	adds	r3, #16
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f041 0201 	orr.w	r2, r1, #1
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	200000bc 	.word	0x200000bc
 80004cc:	20000000 	.word	0x20000000

080004d0 <GPIO_EnableClock>:
#define _PUPD_SHIFT 1

unsigned int *LOOKUP[2][10] ={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_PUPDR,GPIOA_OSPEEDR,GPIOA_IDR,GPIOA_ODR,GPIOA_BSRR,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
							{GPIOB_MODER,GPIOB_OTYPER,GPIOB_PUPDR,GPIOB_OSPEEDR,GPIOB_IDR,GPIOB_ODR,GPIOB_BSRR,GPIOB_LCKR,GPIOB_AFRL,GPIOB_AFRH}};

void GPIO_EnableClock(int Portid) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  switch (Portid) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <GPIO_EnableClock+0x16>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d007      	beq.n	80004f4 <GPIO_EnableClock+0x24>
      break;
    case 1:
      RCC_AHB1ENR |= (0x01 << 1);
      break;
    default:
      break;
 80004e4:	e00d      	b.n	8000502 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 0);
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <GPIO_EnableClock+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <GPIO_EnableClock+0x40>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
      break;
 80004f2:	e006      	b.n	8000502 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 1);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <GPIO_EnableClock+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <GPIO_EnableClock+0x40>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	6013      	str	r3, [r2, #0]
      break;
 8000500:	bf00      	nop
  }
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40023830 	.word	0x40023830

08000514 <GPIO_Init>:


void GPIO_Init(int Portid, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000514:	b490      	push	{r4, r7}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	4608      	mov	r0, r1
 800051e:	4611      	mov	r1, r2
 8000520:	461a      	mov	r2, r3
 8000522:	4603      	mov	r3, r0
 8000524:	70fb      	strb	r3, [r7, #3]
 8000526:	460b      	mov	r3, r1
 8000528:	70bb      	strb	r3, [r7, #2]
 800052a:	4613      	mov	r3, r2
 800052c:	707b      	strb	r3, [r7, #1]
      // Configure moder register for pin direction
      *LOOKUP[Portid][0] &= ~(0x03 << 2 * PinNum);
 800052e:	4957      	ldr	r1, [pc, #348]	; (800068c <GPIO_Init+0x178>)
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6819      	ldr	r1, [r3, #0]
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	2203      	movs	r2, #3
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	43db      	mvns	r3, r3
 800054c:	461c      	mov	r4, r3
 800054e:	484f      	ldr	r0, [pc, #316]	; (800068c <GPIO_Init+0x178>)
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	4403      	add	r3, r0
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	ea01 0204 	and.w	r2, r1, r4
 8000562:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][0] |= PinMode << 2 * PinNum;
 8000564:	4949      	ldr	r1, [pc, #292]	; (800068c <GPIO_Init+0x178>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	440b      	add	r3, r1
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	6819      	ldr	r1, [r3, #0]
 8000576:	78ba      	ldrb	r2, [r7, #2]
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	461c      	mov	r4, r3
 8000582:	4842      	ldr	r0, [pc, #264]	; (800068c <GPIO_Init+0x178>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4403      	add	r3, r0
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	ea41 0204 	orr.w	r2, r1, r4
 8000596:	601a      	str	r2, [r3, #0]

      *LOOKUP[Portid][1] &= ~(1 << PinNum);
 8000598:	493c      	ldr	r1, [pc, #240]	; (800068c <GPIO_Init+0x178>)
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4613      	mov	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	440b      	add	r3, r1
 80005a6:	3304      	adds	r3, #4
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2201      	movs	r2, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	461c      	mov	r4, r3
 80005b8:	4834      	ldr	r0, [pc, #208]	; (800068c <GPIO_Init+0x178>)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4403      	add	r3, r0
 80005c6:	3304      	adds	r3, #4
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	ea01 0204 	and.w	r2, r1, r4
 80005ce:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80005d0:	492e      	ldr	r1, [pc, #184]	; (800068c <GPIO_Init+0x178>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	440b      	add	r3, r1
 80005de:	3304      	adds	r3, #4
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	787b      	ldrb	r3, [r7, #1]
 80005e6:	f003 0201 	and.w	r2, r3, #1
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	461c      	mov	r4, r3
 80005f2:	4826      	ldr	r0, [pc, #152]	; (800068c <GPIO_Init+0x178>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4403      	add	r3, r0
 8000600:	3304      	adds	r3, #4
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	ea41 0204 	orr.w	r2, r1, r4
 8000608:	601a      	str	r2, [r3, #0]

      *LOOKUP[Portid][2] &= ~(0x03 << 2 * PinNum);
 800060a:	4920      	ldr	r1, [pc, #128]	; (800068c <GPIO_Init+0x178>)
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	440b      	add	r3, r1
 8000618:	3308      	adds	r3, #8
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	2203      	movs	r2, #3
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	461c      	mov	r4, r3
 800062c:	4817      	ldr	r0, [pc, #92]	; (800068c <GPIO_Init+0x178>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	4403      	add	r3, r0
 800063a:	3308      	adds	r3, #8
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	ea01 0204 	and.w	r2, r1, r4
 8000642:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][2] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000644:	4911      	ldr	r1, [pc, #68]	; (800068c <GPIO_Init+0x178>)
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	440b      	add	r3, r1
 8000652:	3308      	adds	r3, #8
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6819      	ldr	r1, [r3, #0]
 8000658:	787b      	ldrb	r3, [r7, #1]
 800065a:	105b      	asrs	r3, r3, #1
 800065c:	f003 0203 	and.w	r2, r3, #3
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	461c      	mov	r4, r3
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <GPIO_Init+0x178>)
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4403      	add	r3, r0
 8000678:	3308      	adds	r3, #8
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	ea41 0204 	orr.w	r2, r1, r4
 8000680:	601a      	str	r2, [r3, #0]
      }
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bc90      	pop	{r4, r7}
 800068a:	4770      	bx	lr
 800068c:	20000050 	.word	0x20000050

08000690 <GPIO_WritePin>:


unsigned char GPIO_WritePin(int Portid, unsigned char PinNum,
                            unsigned char Data) {
 8000690:	b490      	push	{r4, r7}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
 800069c:	4613      	mov	r3, r2
 800069e:	70bb      	strb	r3, [r7, #2]
  unsigned char result;
  if (((*LOOKUP[Portid][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 80006a0:	492d      	ldr	r1, [pc, #180]	; (8000758 <GPIO_WritePin+0xc8>)
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	440b      	add	r3, r1
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	78fa      	ldrb	r2, [r7, #3]
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	401a      	ands	r2, r3
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	fa22 f303 	lsr.w	r3, r2, r3
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d13d      	bne.n	8000746 <GPIO_WritePin+0xb6>
     if (Data) {
 80006ca:	78bb      	ldrb	r3, [r7, #2]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d01b      	beq.n	8000708 <GPIO_WritePin+0x78>
    	 *LOOKUP[Portid][5] |= (1 << PinNum);
 80006d0:	4921      	ldr	r1, [pc, #132]	; (8000758 <GPIO_WritePin+0xc8>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	440b      	add	r3, r1
 80006de:	3314      	adds	r3, #20
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2201      	movs	r2, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	461c      	mov	r4, r3
 80006ee:	481a      	ldr	r0, [pc, #104]	; (8000758 <GPIO_WritePin+0xc8>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	4403      	add	r3, r0
 80006fc:	3314      	adds	r3, #20
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	ea41 0204 	orr.w	r2, r1, r4
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e01b      	b.n	8000740 <GPIO_WritePin+0xb0>
        } else {
        	*LOOKUP[Portid][5] &= ~(1 << PinNum);
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <GPIO_WritePin+0xc8>)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	3314      	adds	r3, #20
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2201      	movs	r2, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	461c      	mov	r4, r3
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <GPIO_WritePin+0xc8>)
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4403      	add	r3, r0
 8000736:	3314      	adds	r3, #20
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	ea01 0204 	and.w	r2, r1, r4
 800073e:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e001      	b.n	800074a <GPIO_WritePin+0xba>
      } else {
        result = NOK;
 8000746:	2301      	movs	r3, #1
 8000748:	73fb      	strb	r3, [r7, #15]
      }
  return result;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bc90      	pop	{r4, r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000050 	.word	0x20000050

0800075c <DMA_check>:

#include "GPIO.h"
#include "main.h"
#include "DMA.H"
void DMA_check()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	int value = double_check();
 8000762:	f7ff fd69 	bl	8000238 <double_check>
 8000766:	6078      	str	r0, [r7, #4]
	if (value)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00c      	beq.n	8000788 <DMA_check+0x2c>
	{
		//for(int c;c<6;c++)
		//{
			if (src[99] == dist[99])
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <DMA_check+0x34>)
 8000770:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <DMA_check+0x38>)
 8000776:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800077a:	429a      	cmp	r2, r3
 800077c:	d104      	bne.n	8000788 <DMA_check+0x2c>
			{
				GPIO_WritePin(0,5,1);
 800077e:	2201      	movs	r2, #1
 8000780:	2105      	movs	r1, #5
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ff84 	bl	8000690 <GPIO_WritePin>
			}
		//}
	}
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000250 	.word	0x20000250
 8000794:	200000c0 	.word	0x200000c0

08000798 <main>:

int main(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af02      	add	r7, sp, #8
	for (int i=0;i<100;i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	e00b      	b.n	80007bc <main+0x24>
	{
	src[i]=100*(i+1);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	2264      	movs	r2, #100	; 0x64
 80007aa:	fb02 f203 	mul.w	r2, r2, r3
 80007ae:	4927      	ldr	r1, [pc, #156]	; (800084c <main+0xb4>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0;i<100;i++)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3301      	adds	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b63      	cmp	r3, #99	; 0x63
 80007c0:	ddf0      	ble.n	80007a4 <main+0xc>
	}

	for (int i=0;i<100;i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	e007      	b.n	80007d8 <main+0x40>
	{
	dist[i]=0;
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <main+0xb8>)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2100      	movs	r1, #0
 80007ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<100;i++)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	ddf4      	ble.n	80007c8 <main+0x30>
	}
	GPIO_EnableClock(0);
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fe76 	bl	80004d0 <GPIO_EnableClock>
	GPIO_Init(0, 5,OUTPUT, PUSH_PULL);
 80007e4:	2300      	movs	r3, #0
 80007e6:	2201      	movs	r2, #1
 80007e8:	2105      	movs	r1, #5
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff fe92 	bl	8000514 <GPIO_Init>
	GPIO_Init(0, 6,OUTPUT, PUSH_PULL);
 80007f0:	2300      	movs	r3, #0
 80007f2:	2201      	movs	r2, #1
 80007f4:	2106      	movs	r1, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fe8c 	bl	8000514 <GPIO_Init>
	GPIO_Init(0, 7,OUTPUT, PUSH_PULL);
 80007fc:	2300      	movs	r3, #0
 80007fe:	2201      	movs	r2, #1
 8000800:	2107      	movs	r1, #7
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fe86 	bl	8000514 <GPIO_Init>
	GPIO_Init(0, 8,OUTPUT, PUSH_PULL);
 8000808:	2300      	movs	r3, #0
 800080a:	2201      	movs	r2, #1
 800080c:	2108      	movs	r1, #8
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fe80 	bl	8000514 <GPIO_Init>
	GPIO_Init(0, 9,OUTPUT, PUSH_PULL);
 8000814:	2300      	movs	r3, #0
 8000816:	2201      	movs	r2, #1
 8000818:	2109      	movs	r1, #9
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fe7a 	bl	8000514 <GPIO_Init>
	GPIO_Init(0, 10,OUTPUT, PUSH_PULL);
 8000820:	2300      	movs	r3, #0
 8000822:	2201      	movs	r2, #1
 8000824:	210a      	movs	r1, #10
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fe74 	bl	8000514 <GPIO_Init>
	DMA_init(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fcd1 	bl	80001d4 <DMA_init>
	DMA_param(src,dist,100,WORD,M_M,SINGLE) ;
 8000832:	2300      	movs	r3, #0
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2302      	movs	r3, #2
 800083c:	2264      	movs	r2, #100	; 0x64
 800083e:	4904      	ldr	r1, [pc, #16]	; (8000850 <main+0xb8>)
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <main+0xb4>)
 8000842:	f7ff fd29 	bl	8000298 <DMA_param>

	DMA_start();
 8000846:	f7ff fe07 	bl	8000458 <DMA_start>




  while (1){
 800084a:	e7fe      	b.n	800084a <main+0xb2>
 800084c:	20000250 	.word	0x20000250
 8000850:	200000c0 	.word	0x200000c0

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800087e:	490e      	ldr	r1, [pc, #56]	; (80008b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000894:	4c0b      	ldr	r4, [pc, #44]	; (80008c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008a2:	f7ff ffd7 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f000 f811 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008aa:	f7ff ff75 	bl	8000798 <main>
  bx  lr    
 80008ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80008bc:	08000934 	.word	0x08000934
  ldr r2, =_sbss
 80008c0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80008c4:	200003e0 	.word	0x200003e0

080008c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>
	...

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4d0d      	ldr	r5, [pc, #52]	; (8000904 <__libc_init_array+0x38>)
 80008d0:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d2:	1b64      	subs	r4, r4, r5
 80008d4:	10a4      	asrs	r4, r4, #2
 80008d6:	2600      	movs	r6, #0
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	4d0b      	ldr	r5, [pc, #44]	; (800090c <__libc_init_array+0x40>)
 80008de:	4c0c      	ldr	r4, [pc, #48]	; (8000910 <__libc_init_array+0x44>)
 80008e0:	f000 f818 	bl	8000914 <_init>
 80008e4:	1b64      	subs	r4, r4, r5
 80008e6:	10a4      	asrs	r4, r4, #2
 80008e8:	2600      	movs	r6, #0
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	0800092c 	.word	0x0800092c
 8000908:	0800092c 	.word	0x0800092c
 800090c:	0800092c 	.word	0x0800092c
 8000910:	08000930 	.word	0x08000930

08000914 <_init>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

08000920 <_fini>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	bf00      	nop
 8000924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000926:	bc08      	pop	{r3}
 8000928:	469e      	mov	lr, r3
 800092a:	4770      	bx	lr
