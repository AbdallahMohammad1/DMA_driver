
Lab5_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800069c  0800069c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800069c  0800069c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800069c  0800069c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800069c  0800069c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800069c  0800069c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080006a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  0800070c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800070c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008b2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000034c  00000000  00000000  0002094a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00020c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00020d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e4a  00000000  00000000  00020e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bae  00000000  00000000  00021c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ff64  00000000  00000000  00022808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007276c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  000727c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000684 	.word	0x08000684

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08000684 	.word	0x08000684

080001d4 <GPIO_EnableClock>:
#define _PUPD_SHIFT 1

unsigned int *LOOKUP[2][10] ={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_PUPDR,GPIOA_OSPEEDR,GPIOA_IDR,GPIOA_ODR,GPIOA_BSRR,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
							{GPIOB_MODER,GPIOB_OTYPER,GPIOB_PUPDR,GPIOB_OSPEEDR,GPIOB_IDR,GPIOB_ODR,GPIOB_BSRR,GPIOB_LCKR,GPIOB_AFRL,GPIOB_AFRH}};

void GPIO_EnableClock(int Portid) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  switch (Portid) {
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d003      	beq.n	80001ea <GPIO_EnableClock+0x16>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d007      	beq.n	80001f8 <GPIO_EnableClock+0x24>
      break;
    case 1:
      RCC_AHB1ENR |= (0x01 << 1);
      break;
    default:
      break;
 80001e8:	e00d      	b.n	8000206 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 0);
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <GPIO_EnableClock+0x40>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <GPIO_EnableClock+0x40>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6013      	str	r3, [r2, #0]
      break;
 80001f6:	e006      	b.n	8000206 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 1);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <GPIO_EnableClock+0x40>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <GPIO_EnableClock+0x40>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6013      	str	r3, [r2, #0]
      break;
 8000204:	bf00      	nop
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023830 	.word	0x40023830

08000218 <GPIO_Init>:


void GPIO_Init(int Portid, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000218:	b490      	push	{r4, r7}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4603      	mov	r3, r0
 8000228:	70fb      	strb	r3, [r7, #3]
 800022a:	460b      	mov	r3, r1
 800022c:	70bb      	strb	r3, [r7, #2]
 800022e:	4613      	mov	r3, r2
 8000230:	707b      	strb	r3, [r7, #1]
      // Configure moder register for pin direction
      *LOOKUP[Portid][0] &= ~(0x03 << 2 * PinNum);
 8000232:	4957      	ldr	r1, [pc, #348]	; (8000390 <GPIO_Init+0x178>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	4413      	add	r3, r2
 800023c:	00db      	lsls	r3, r3, #3
 800023e:	440b      	add	r3, r1
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	6819      	ldr	r1, [r3, #0]
 8000244:	78fb      	ldrb	r3, [r7, #3]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	2203      	movs	r2, #3
 800024a:	fa02 f303 	lsl.w	r3, r2, r3
 800024e:	43db      	mvns	r3, r3
 8000250:	461c      	mov	r4, r3
 8000252:	484f      	ldr	r0, [pc, #316]	; (8000390 <GPIO_Init+0x178>)
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4613      	mov	r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4413      	add	r3, r2
 800025c:	00db      	lsls	r3, r3, #3
 800025e:	4403      	add	r3, r0
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	ea01 0204 	and.w	r2, r1, r4
 8000266:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][0] |= PinMode << 2 * PinNum;
 8000268:	4949      	ldr	r1, [pc, #292]	; (8000390 <GPIO_Init+0x178>)
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	4613      	mov	r3, r2
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	440b      	add	r3, r1
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	6819      	ldr	r1, [r3, #0]
 800027a:	78ba      	ldrb	r2, [r7, #2]
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	fa02 f303 	lsl.w	r3, r2, r3
 8000284:	461c      	mov	r4, r3
 8000286:	4842      	ldr	r0, [pc, #264]	; (8000390 <GPIO_Init+0x178>)
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	4613      	mov	r3, r2
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	4413      	add	r3, r2
 8000290:	00db      	lsls	r3, r3, #3
 8000292:	4403      	add	r3, r0
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	ea41 0204 	orr.w	r2, r1, r4
 800029a:	601a      	str	r2, [r3, #0]

      *LOOKUP[Portid][1] &= ~(1 << PinNum);
 800029c:	493c      	ldr	r1, [pc, #240]	; (8000390 <GPIO_Init+0x178>)
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	4613      	mov	r3, r2
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	4413      	add	r3, r2
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	440b      	add	r3, r1
 80002aa:	3304      	adds	r3, #4
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	6819      	ldr	r1, [r3, #0]
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	2201      	movs	r2, #1
 80002b4:	fa02 f303 	lsl.w	r3, r2, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	461c      	mov	r4, r3
 80002bc:	4834      	ldr	r0, [pc, #208]	; (8000390 <GPIO_Init+0x178>)
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	4613      	mov	r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	4403      	add	r3, r0
 80002ca:	3304      	adds	r3, #4
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	ea01 0204 	and.w	r2, r1, r4
 80002d2:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80002d4:	492e      	ldr	r1, [pc, #184]	; (8000390 <GPIO_Init+0x178>)
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4613      	mov	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	440b      	add	r3, r1
 80002e2:	3304      	adds	r3, #4
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6819      	ldr	r1, [r3, #0]
 80002e8:	787b      	ldrb	r3, [r7, #1]
 80002ea:	f003 0201 	and.w	r2, r3, #1
 80002ee:	78fb      	ldrb	r3, [r7, #3]
 80002f0:	fa02 f303 	lsl.w	r3, r2, r3
 80002f4:	461c      	mov	r4, r3
 80002f6:	4826      	ldr	r0, [pc, #152]	; (8000390 <GPIO_Init+0x178>)
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4613      	mov	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	4403      	add	r3, r0
 8000304:	3304      	adds	r3, #4
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	ea41 0204 	orr.w	r2, r1, r4
 800030c:	601a      	str	r2, [r3, #0]

      *LOOKUP[Portid][2] &= ~(0x03 << 2 * PinNum);
 800030e:	4920      	ldr	r1, [pc, #128]	; (8000390 <GPIO_Init+0x178>)
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	440b      	add	r3, r1
 800031c:	3308      	adds	r3, #8
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	6819      	ldr	r1, [r3, #0]
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	2203      	movs	r2, #3
 8000328:	fa02 f303 	lsl.w	r3, r2, r3
 800032c:	43db      	mvns	r3, r3
 800032e:	461c      	mov	r4, r3
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <GPIO_Init+0x178>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	4403      	add	r3, r0
 800033e:	3308      	adds	r3, #8
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	ea01 0204 	and.w	r2, r1, r4
 8000346:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][2] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000348:	4911      	ldr	r1, [pc, #68]	; (8000390 <GPIO_Init+0x178>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4613      	mov	r3, r2
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	4413      	add	r3, r2
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	440b      	add	r3, r1
 8000356:	3308      	adds	r3, #8
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	787b      	ldrb	r3, [r7, #1]
 800035e:	105b      	asrs	r3, r3, #1
 8000360:	f003 0203 	and.w	r2, r3, #3
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	fa02 f303 	lsl.w	r3, r2, r3
 800036c:	461c      	mov	r4, r3
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <GPIO_Init+0x178>)
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4613      	mov	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	4413      	add	r3, r2
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	4403      	add	r3, r0
 800037c:	3308      	adds	r3, #8
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	ea41 0204 	orr.w	r2, r1, r4
 8000384:	601a      	str	r2, [r3, #0]
      }
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bc90      	pop	{r4, r7}
 800038e:	4770      	bx	lr
 8000390:	20000000 	.word	0x20000000

08000394 <GPIO_WritePin>:


unsigned char GPIO_WritePin(int Portid, unsigned char PinNum,
                            unsigned char Data) {
 8000394:	b490      	push	{r4, r7}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
 80003a0:	4613      	mov	r3, r2
 80003a2:	70bb      	strb	r3, [r7, #2]
  unsigned char result;
  if (((*LOOKUP[Portid][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 80003a4:	492d      	ldr	r1, [pc, #180]	; (800045c <GPIO_WritePin+0xc8>)
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	4613      	mov	r3, r2
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4413      	add	r3, r2
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	440b      	add	r3, r1
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	78fa      	ldrb	r2, [r7, #3]
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	2103      	movs	r1, #3
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	401a      	ands	r2, r3
 80003c2:	78fb      	ldrb	r3, [r7, #3]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	fa22 f303 	lsr.w	r3, r2, r3
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d13d      	bne.n	800044a <GPIO_WritePin+0xb6>
     if (Data) {
 80003ce:	78bb      	ldrb	r3, [r7, #2]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d01b      	beq.n	800040c <GPIO_WritePin+0x78>
    	 *LOOKUP[Portid][5] |= (1 << PinNum);
 80003d4:	4921      	ldr	r1, [pc, #132]	; (800045c <GPIO_WritePin+0xc8>)
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	440b      	add	r3, r1
 80003e2:	3314      	adds	r3, #20
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	6819      	ldr	r1, [r3, #0]
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2201      	movs	r2, #1
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	461c      	mov	r4, r3
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <GPIO_WritePin+0xc8>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	4403      	add	r3, r0
 8000400:	3314      	adds	r3, #20
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	ea41 0204 	orr.w	r2, r1, r4
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	e01b      	b.n	8000444 <GPIO_WritePin+0xb0>
        } else {
        	*LOOKUP[Portid][5] &= ~(1 << PinNum);
 800040c:	4913      	ldr	r1, [pc, #76]	; (800045c <GPIO_WritePin+0xc8>)
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4613      	mov	r3, r2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4413      	add	r3, r2
 8000416:	00db      	lsls	r3, r3, #3
 8000418:	440b      	add	r3, r1
 800041a:	3314      	adds	r3, #20
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6819      	ldr	r1, [r3, #0]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	2201      	movs	r2, #1
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	43db      	mvns	r3, r3
 800042a:	461c      	mov	r4, r3
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <GPIO_WritePin+0xc8>)
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	4613      	mov	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	4413      	add	r3, r2
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	4403      	add	r3, r0
 800043a:	3314      	adds	r3, #20
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	ea01 0204 	and.w	r2, r1, r4
 8000442:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 8000444:	2300      	movs	r3, #0
 8000446:	73fb      	strb	r3, [r7, #15]
 8000448:	e001      	b.n	800044e <GPIO_WritePin+0xba>
      } else {
        result = NOK;
 800044a:	2301      	movs	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
      }
  return result;
 800044e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bc90      	pop	{r4, r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000

08000460 <DMA_init>:
#include "GPIO.h"
#include "main.h"
#include "DMA.H"
#include "stdint.h"
void DMA_init()
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= 1 << 22;					// enable DMA2 clock
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <DMA_init+0x24>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a06      	ldr	r2, [pc, #24]	; (8000484 <DMA_init+0x24>)
 800046a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800046e:	6013      	str	r3, [r2, #0]
	*NVIC_ISER1	 = 1<<24;				// enable line 56 in NVIC in NVIC_ISER1 (which is bit 24 in the register)
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <DMA_init+0x28>)
 8000472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000476:	601a      	str	r2, [r3, #0]

}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023830 	.word	0x40023830
 8000488:	e000e104 	.word	0xe000e104

0800048c <ddd>:
void ddd()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	if((*DMA_LISR & 0x20))
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <ddd+0x24>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	2b00      	cmp	r3, #0
 800049a:	d007      	beq.n	80004ac <ddd+0x20>
	{
	GPIO_WritePin(0,5,destination[0]);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <ddd+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	2105      	movs	r1, #5
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff ff74 	bl	8000394 <GPIO_WritePin>
	}
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40026400 	.word	0x40026400
 80004b4:	20000084 	.word	0x20000084

080004b8 <DMA_check>:
void DMA_check()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	ddd();
 80004bc:	f7ff ffe6 	bl	800048c <ddd>
	*DMA_LIFCR |= (1<<4);
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <DMA_check+0x18>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a02      	ldr	r2, [pc, #8]	; (80004d0 <DMA_check+0x18>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	6013      	str	r3, [r2, #0]

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40026408 	.word	0x40026408

080004d4 <DMA_param>:
		GPIO_WritePin(0,5,destination[5]);
		}
		for(int i=0; i<5000000;i++);
}
void DMA_param(int *src,int *dest,int n,unsigned char trans_size)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	70fb      	strb	r3, [r7, #3]
	*DMA_S0CR = 0;
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <DMA_param+0x6c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
	*DMA_S0CR 	|= (0x01 << 7);		// memory to memory
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <DMA_param+0x6c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <DMA_param+0x6c>)
 80004ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f2:	6013      	str	r3, [r2, #0]
	*DMA_S0PAR	 = (uint32_t)src;   // source address
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <DMA_param+0x70>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6013      	str	r3, [r2, #0]
	*DMA_S0M0AR  = (uint32_t) dest;	// destination address
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <DMA_param+0x74>)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	6013      	str	r3, [r2, #0]
	*DMA_S0NDTR	 = n;				// number of transfers
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <DMA_param+0x78>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6013      	str	r3, [r2, #0]
	*DMA_S0CR 	|= (trans_size << 11);		// trans_size
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <DMA_param+0x6c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	78fa      	ldrb	r2, [r7, #3]
 800050c:	02d2      	lsls	r2, r2, #11
 800050e:	4611      	mov	r1, r2
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <DMA_param+0x6c>)
 8000512:	430b      	orrs	r3, r1
 8000514:	6013      	str	r3, [r2, #0]
	*DMA_S0CR 	|= (trans_size << 13);		// trans_size
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <DMA_param+0x6c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	78fa      	ldrb	r2, [r7, #3]
 800051c:	0352      	lsls	r2, r2, #13
 800051e:	4611      	mov	r1, r2
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <DMA_param+0x6c>)
 8000522:	430b      	orrs	r3, r1
 8000524:	6013      	str	r3, [r2, #0]
	*DMA_S0CR   |= (0x03 << 9);			// increment mode according to MSIZE and PSIZE
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <DMA_param+0x6c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <DMA_param+0x6c>)
 800052c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000530:	6013      	str	r3, [r2, #0]

}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40026410 	.word	0x40026410
 8000544:	40026418 	.word	0x40026418
 8000548:	4002641c 	.word	0x4002641c
 800054c:	40026414 	.word	0x40026414

08000550 <DMA_start>:
void DMA_start()
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	*DMA_S0CR	|= (0x01 << 4);			// Transfer complete interrupt enable
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <DMA_start+0x2c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <DMA_start+0x2c>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	6013      	str	r3, [r2, #0]
	*DMA_LIFCR   = 0; 					//clear all interrupt flags
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <DMA_start+0x30>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
	*DMA_S0CR	|= 1;					// enable stream 0
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <DMA_start+0x2c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <DMA_start+0x2c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40026410 	.word	0x40026410
 8000580:	40026408 	.word	0x40026408

08000584 <main>:

int main(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	GPIO_EnableClock(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fe23 	bl	80001d4 <GPIO_EnableClock>
	GPIO_Init(0, 5,OUTPUT, PUSH_PULL);
 800058e:	2300      	movs	r3, #0
 8000590:	2201      	movs	r2, #1
 8000592:	2105      	movs	r1, #5
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fe3f 	bl	8000218 <GPIO_Init>
	DMA_init();
 800059a:	f7ff ff61 	bl	8000460 <DMA_init>
	DMA_param(source,destination,10,WORD);
 800059e:	2302      	movs	r3, #2
 80005a0:	220a      	movs	r2, #10
 80005a2:	4906      	ldr	r1, [pc, #24]	; (80005bc <main+0x38>)
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0x3c>)
 80005a6:	f7ff ff95 	bl	80004d4 <DMA_param>

	DMA_start();
 80005aa:	f7ff ffd1 	bl	8000550 <DMA_start>




  while (1){
		GPIO_WritePin(0,5,0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2105      	movs	r1, #5
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff feee 	bl	8000394 <GPIO_WritePin>
 80005b8:	e7f9      	b.n	80005ae <main+0x2a>
 80005ba:	bf00      	nop
 80005bc:	20000084 	.word	0x20000084
 80005c0:	20000050 	.word	0x20000050

080005c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000612:	f7ff ffd7 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f000 f811 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f7ff ffb3 	bl	8000584 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800062c:	080006a4 	.word	0x080006a4
  ldr r2, =_sbss
 8000630:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000634:	2000009c 	.word	0x2000009c

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4d0d      	ldr	r5, [pc, #52]	; (8000674 <__libc_init_array+0x38>)
 8000640:	4c0d      	ldr	r4, [pc, #52]	; (8000678 <__libc_init_array+0x3c>)
 8000642:	1b64      	subs	r4, r4, r5
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	2600      	movs	r6, #0
 8000648:	42a6      	cmp	r6, r4
 800064a:	d109      	bne.n	8000660 <__libc_init_array+0x24>
 800064c:	4d0b      	ldr	r5, [pc, #44]	; (800067c <__libc_init_array+0x40>)
 800064e:	4c0c      	ldr	r4, [pc, #48]	; (8000680 <__libc_init_array+0x44>)
 8000650:	f000 f818 	bl	8000684 <_init>
 8000654:	1b64      	subs	r4, r4, r5
 8000656:	10a4      	asrs	r4, r4, #2
 8000658:	2600      	movs	r6, #0
 800065a:	42a6      	cmp	r6, r4
 800065c:	d105      	bne.n	800066a <__libc_init_array+0x2e>
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f855 3b04 	ldr.w	r3, [r5], #4
 8000664:	4798      	blx	r3
 8000666:	3601      	adds	r6, #1
 8000668:	e7ee      	b.n	8000648 <__libc_init_array+0xc>
 800066a:	f855 3b04 	ldr.w	r3, [r5], #4
 800066e:	4798      	blx	r3
 8000670:	3601      	adds	r6, #1
 8000672:	e7f2      	b.n	800065a <__libc_init_array+0x1e>
 8000674:	0800069c 	.word	0x0800069c
 8000678:	0800069c 	.word	0x0800069c
 800067c:	0800069c 	.word	0x0800069c
 8000680:	080006a0 	.word	0x080006a0

08000684 <_init>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr

08000690 <_fini>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr
