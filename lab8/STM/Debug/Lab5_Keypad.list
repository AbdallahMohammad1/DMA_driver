
Lab5_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000590  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000724  08000724  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000724  08000724  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000724  08000724  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000724  08000724  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000728  08000728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800072c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08000794  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000794  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000908  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000379  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00020d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00020e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de75  00000000  00000000  00020eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c27  00000000  00000000  0002ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000500c5  00000000  00000000  0002f954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fa19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000023c  00000000  00000000  0007fa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800070c 	.word	0x0800070c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	0800070c 	.word	0x0800070c

080001d4 <DMA_init>:
#include "DMA.h"
#include "GPIO.h"
#include "stdint.h"

void DMA_init()
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= 1 << 22;					// enable DMA2 clock
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <DMA_init+0x24>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <DMA_init+0x24>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6013      	str	r3, [r2, #0]
	*NVIC_ISER1	 = 1<<24;				// enable line 56 in NVIC in NVIC_ISER1 (which is bit 24 in the register)
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <DMA_init+0x28>)
 80001e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80001ea:	601a      	str	r2, [r3, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40023830 	.word	0x40023830
 80001fc:	e000e104 	.word	0xe000e104

08000200 <double_check>:
void double_check()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	if((*DMA_LISR & 0x20))
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <double_check+0x20>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f003 0320 	and.w	r3, r3, #32
 800020c:	2b00      	cmp	r3, #0
 800020e:	d004      	beq.n	800021a <double_check+0x1a>
	{
	GPIO_WritePin(0,5,1);
 8000210:	2201      	movs	r2, #1
 8000212:	2105      	movs	r1, #5
 8000214:	2000      	movs	r0, #0
 8000216:	f000 f979 	bl	800050c <GPIO_WritePin>
	}
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40026400 	.word	0x40026400

08000224 <DMA_param>:
		GPIO_WritePin(0,5,1);
		}
		for(int i=0; i<5000000;i++);
}
void DMA_param(int *src,int *dest,int n,unsigned char trans_size,unsigned char trans_mode,unsigned char trans_type)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	70fb      	strb	r3, [r7, #3]
	*DMA_S0CR = 0;
 8000232:	4b34      	ldr	r3, [pc, #208]	; (8000304 <DMA_param+0xe0>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
	*DMA_S0CR 	|= (trans_mode << 6);		// memory to memory
 8000238:	4b32      	ldr	r3, [pc, #200]	; (8000304 <DMA_param+0xe0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	7e3a      	ldrb	r2, [r7, #24]
 800023e:	0192      	lsls	r2, r2, #6
 8000240:	4611      	mov	r1, r2
 8000242:	4a30      	ldr	r2, [pc, #192]	; (8000304 <DMA_param+0xe0>)
 8000244:	430b      	orrs	r3, r1
 8000246:	6013      	str	r3, [r2, #0]
	*DMA_S0PAR	 = (uint32_t)src;   // source address
 8000248:	4a2f      	ldr	r2, [pc, #188]	; (8000308 <DMA_param+0xe4>)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	6013      	str	r3, [r2, #0]
	*DMA_S0M0AR  = (uint32_t) dest;	// destination address
 800024e:	4a2f      	ldr	r2, [pc, #188]	; (800030c <DMA_param+0xe8>)
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	6013      	str	r3, [r2, #0]
	*DMA_S0NDTR	 = n;				// number of transfers
 8000254:	4a2e      	ldr	r2, [pc, #184]	; (8000310 <DMA_param+0xec>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
	*DMA_S0CR 	|= (trans_size << 11);		// trans_size
 800025a:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <DMA_param+0xe0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	78fa      	ldrb	r2, [r7, #3]
 8000260:	02d2      	lsls	r2, r2, #11
 8000262:	4611      	mov	r1, r2
 8000264:	4a27      	ldr	r2, [pc, #156]	; (8000304 <DMA_param+0xe0>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
	*DMA_S0CR 	|= (trans_size << 13);		// trans_size
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <DMA_param+0xe0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	78fa      	ldrb	r2, [r7, #3]
 8000270:	0352      	lsls	r2, r2, #13
 8000272:	4611      	mov	r1, r2
 8000274:	4a23      	ldr	r2, [pc, #140]	; (8000304 <DMA_param+0xe0>)
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
	*DMA_S0CR   |= (0x03 << 9);			// increment mode according to MSIZE and PSIZE
 800027a:	4b22      	ldr	r3, [pc, #136]	; (8000304 <DMA_param+0xe0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a21      	ldr	r2, [pc, #132]	; (8000304 <DMA_param+0xe0>)
 8000280:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000284:	6013      	str	r3, [r2, #0]
	if (trans_type == SINGLE && trans_mode != M_M)
 8000286:	7f3b      	ldrb	r3, [r7, #28]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d11a      	bne.n	80002c2 <DMA_param+0x9e>
 800028c:	7e3b      	ldrb	r3, [r7, #24]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d017      	beq.n	80002c2 <DMA_param+0x9e>
	{
		*DMA_S0FCR &= ~(1<<2);	// DMDIS enabled
 8000292:	4b20      	ldr	r3, [pc, #128]	; (8000314 <DMA_param+0xf0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a1f      	ldr	r2, [pc, #124]	; (8000314 <DMA_param+0xf0>)
 8000298:	f023 0304 	bic.w	r3, r3, #4
 800029c:	6013      	str	r3, [r2, #0]
		*DMA_S0CR   &= ~(0x03 << 21);			// PBURST single
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <DMA_param+0xe0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <DMA_param+0xe0>)
 80002a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80002a8:	6013      	str	r3, [r2, #0]
		*DMA_S0CR   &= ~(0x03 << 23);			// MBURST single
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <DMA_param+0xe0>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a15      	ldr	r2, [pc, #84]	; (8000304 <DMA_param+0xe0>)
 80002b0:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 80002b4:	6013      	str	r3, [r2, #0]
		GPIO_WritePin(0,7,1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2107      	movs	r1, #7
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 f926 	bl	800050c <GPIO_WritePin>
 80002c0:	e01b      	b.n	80002fa <DMA_param+0xd6>
	}
	else
	{
		GPIO_WritePin(0,6,1);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2106      	movs	r1, #6
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 f920 	bl	800050c <GPIO_WritePin>

		*DMA_S0FCR |= (1<<2);	// DMDIS disabled
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <DMA_param+0xf0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a10      	ldr	r2, [pc, #64]	; (8000314 <DMA_param+0xf0>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]
		*DMA_S0CR   |= ( trans_type<< 21);			// PBURST burst 4/8/16
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <DMA_param+0xe0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	7f3a      	ldrb	r2, [r7, #28]
 80002de:	0552      	lsls	r2, r2, #21
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <DMA_param+0xe0>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	6013      	str	r3, [r2, #0]
		*DMA_S0CR   |= (trans_type << 23);			// MBURST burst 4/8/16
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <DMA_param+0xe0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	7f3a      	ldrb	r2, [r7, #28]
 80002ee:	05d2      	lsls	r2, r2, #23
 80002f0:	4611      	mov	r1, r2
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <DMA_param+0xe0>)
 80002f4:	430b      	orrs	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40026410 	.word	0x40026410
 8000308:	40026418 	.word	0x40026418
 800030c:	4002641c 	.word	0x4002641c
 8000310:	40026414 	.word	0x40026414
 8000314:	40026424 	.word	0x40026424

08000318 <DMA_start>:
void DMA_start()
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	*DMA_S0CR	|= (0x01 << 4);			// Transfer complete interrupt enable
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <DMA_start+0x2c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <DMA_start+0x2c>)
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	6013      	str	r3, [r2, #0]
	*DMA_LIFCR   = 0; 					//clear all interrupt flags
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <DMA_start+0x30>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
	*DMA_S0CR	|= 1;					// enable stream 0
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <DMA_start+0x2c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <DMA_start+0x2c>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40026410 	.word	0x40026410
 8000348:	40026408 	.word	0x40026408

0800034c <GPIO_EnableClock>:
#define _PUPD_SHIFT 1

unsigned int *LOOKUP[2][10] ={{GPIOA_MODER,GPIOA_OTYPER,GPIOA_PUPDR,GPIOA_OSPEEDR,GPIOA_IDR,GPIOA_ODR,GPIOA_BSRR,GPIOA_LCKR,GPIOA_AFRL,GPIOA_AFRH},
							{GPIOB_MODER,GPIOB_OTYPER,GPIOB_PUPDR,GPIOB_OSPEEDR,GPIOB_IDR,GPIOB_ODR,GPIOB_BSRR,GPIOB_LCKR,GPIOB_AFRL,GPIOB_AFRH}};

void GPIO_EnableClock(int Portid) {
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  switch (Portid) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d003      	beq.n	8000362 <GPIO_EnableClock+0x16>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d007      	beq.n	8000370 <GPIO_EnableClock+0x24>
      break;
    case 1:
      RCC_AHB1ENR |= (0x01 << 1);
      break;
    default:
      break;
 8000360:	e00d      	b.n	800037e <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 0);
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <GPIO_EnableClock+0x40>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a09      	ldr	r2, [pc, #36]	; (800038c <GPIO_EnableClock+0x40>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]
      break;
 800036e:	e006      	b.n	800037e <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 1);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <GPIO_EnableClock+0x40>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <GPIO_EnableClock+0x40>)
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	6013      	str	r3, [r2, #0]
      break;
 800037c:	bf00      	nop
  }
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40023830 	.word	0x40023830

08000390 <GPIO_Init>:


void GPIO_Init(int Portid, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000390:	b490      	push	{r4, r7}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	4608      	mov	r0, r1
 800039a:	4611      	mov	r1, r2
 800039c:	461a      	mov	r2, r3
 800039e:	4603      	mov	r3, r0
 80003a0:	70fb      	strb	r3, [r7, #3]
 80003a2:	460b      	mov	r3, r1
 80003a4:	70bb      	strb	r3, [r7, #2]
 80003a6:	4613      	mov	r3, r2
 80003a8:	707b      	strb	r3, [r7, #1]
      // Configure moder register for pin direction
      *LOOKUP[Portid][0] &= ~(0x03 << 2 * PinNum);
 80003aa:	4957      	ldr	r1, [pc, #348]	; (8000508 <GPIO_Init+0x178>)
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	440b      	add	r3, r1
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6819      	ldr	r1, [r3, #0]
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	2203      	movs	r2, #3
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	43db      	mvns	r3, r3
 80003c8:	461c      	mov	r4, r3
 80003ca:	484f      	ldr	r0, [pc, #316]	; (8000508 <GPIO_Init+0x178>)
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	4613      	mov	r3, r2
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	4413      	add	r3, r2
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4403      	add	r3, r0
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	ea01 0204 	and.w	r2, r1, r4
 80003de:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][0] |= PinMode << 2 * PinNum;
 80003e0:	4949      	ldr	r1, [pc, #292]	; (8000508 <GPIO_Init+0x178>)
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	4613      	mov	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	4413      	add	r3, r2
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	440b      	add	r3, r1
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	6819      	ldr	r1, [r3, #0]
 80003f2:	78ba      	ldrb	r2, [r7, #2]
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	461c      	mov	r4, r3
 80003fe:	4842      	ldr	r0, [pc, #264]	; (8000508 <GPIO_Init+0x178>)
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	4403      	add	r3, r0
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	ea41 0204 	orr.w	r2, r1, r4
 8000412:	601a      	str	r2, [r3, #0]

      *LOOKUP[Portid][1] &= ~(1 << PinNum);
 8000414:	493c      	ldr	r1, [pc, #240]	; (8000508 <GPIO_Init+0x178>)
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	00db      	lsls	r3, r3, #3
 8000420:	440b      	add	r3, r1
 8000422:	3304      	adds	r3, #4
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6819      	ldr	r1, [r3, #0]
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	2201      	movs	r2, #1
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	461c      	mov	r4, r3
 8000434:	4834      	ldr	r0, [pc, #208]	; (8000508 <GPIO_Init+0x178>)
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4613      	mov	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	4403      	add	r3, r0
 8000442:	3304      	adds	r3, #4
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	ea01 0204 	and.w	r2, r1, r4
 800044a:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 800044c:	492e      	ldr	r1, [pc, #184]	; (8000508 <GPIO_Init+0x178>)
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	440b      	add	r3, r1
 800045a:	3304      	adds	r3, #4
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	787b      	ldrb	r3, [r7, #1]
 8000462:	f003 0201 	and.w	r2, r3, #1
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	461c      	mov	r4, r3
 800046e:	4826      	ldr	r0, [pc, #152]	; (8000508 <GPIO_Init+0x178>)
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	4613      	mov	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4413      	add	r3, r2
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	4403      	add	r3, r0
 800047c:	3304      	adds	r3, #4
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	ea41 0204 	orr.w	r2, r1, r4
 8000484:	601a      	str	r2, [r3, #0]

      *LOOKUP[Portid][2] &= ~(0x03 << 2 * PinNum);
 8000486:	4920      	ldr	r1, [pc, #128]	; (8000508 <GPIO_Init+0x178>)
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	440b      	add	r3, r1
 8000494:	3308      	adds	r3, #8
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6819      	ldr	r1, [r3, #0]
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	2203      	movs	r2, #3
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	461c      	mov	r4, r3
 80004a8:	4817      	ldr	r0, [pc, #92]	; (8000508 <GPIO_Init+0x178>)
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	4613      	mov	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4413      	add	r3, r2
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	4403      	add	r3, r0
 80004b6:	3308      	adds	r3, #8
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	ea01 0204 	and.w	r2, r1, r4
 80004be:	601a      	str	r2, [r3, #0]
      *LOOKUP[Portid][2] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80004c0:	4911      	ldr	r1, [pc, #68]	; (8000508 <GPIO_Init+0x178>)
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	440b      	add	r3, r1
 80004ce:	3308      	adds	r3, #8
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	787b      	ldrb	r3, [r7, #1]
 80004d6:	105b      	asrs	r3, r3, #1
 80004d8:	f003 0203 	and.w	r2, r3, #3
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	461c      	mov	r4, r3
 80004e6:	4808      	ldr	r0, [pc, #32]	; (8000508 <GPIO_Init+0x178>)
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4613      	mov	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	4403      	add	r3, r0
 80004f4:	3308      	adds	r3, #8
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	ea41 0204 	orr.w	r2, r1, r4
 80004fc:	601a      	str	r2, [r3, #0]
      }
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bc90      	pop	{r4, r7}
 8000506:	4770      	bx	lr
 8000508:	20000000 	.word	0x20000000

0800050c <GPIO_WritePin>:


unsigned char GPIO_WritePin(int Portid, unsigned char PinNum,
                            unsigned char Data) {
 800050c:	b490      	push	{r4, r7}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
 8000518:	4613      	mov	r3, r2
 800051a:	70bb      	strb	r3, [r7, #2]
  unsigned char result;
  if (((*LOOKUP[Portid][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 800051c:	492d      	ldr	r1, [pc, #180]	; (80005d4 <GPIO_WritePin+0xc8>)
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4613      	mov	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	440b      	add	r3, r1
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	0052      	lsls	r2, r2, #1
 8000532:	2103      	movs	r1, #3
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	401a      	ands	r2, r3
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa22 f303 	lsr.w	r3, r2, r3
 8000542:	2b01      	cmp	r3, #1
 8000544:	d13d      	bne.n	80005c2 <GPIO_WritePin+0xb6>
     if (Data) {
 8000546:	78bb      	ldrb	r3, [r7, #2]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d01b      	beq.n	8000584 <GPIO_WritePin+0x78>
    	 *LOOKUP[Portid][5] |= (1 << PinNum);
 800054c:	4921      	ldr	r1, [pc, #132]	; (80005d4 <GPIO_WritePin+0xc8>)
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	440b      	add	r3, r1
 800055a:	3314      	adds	r3, #20
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	2201      	movs	r2, #1
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	461c      	mov	r4, r3
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <GPIO_WritePin+0xc8>)
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	4403      	add	r3, r0
 8000578:	3314      	adds	r3, #20
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	ea41 0204 	orr.w	r2, r1, r4
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	e01b      	b.n	80005bc <GPIO_WritePin+0xb0>
        } else {
        	*LOOKUP[Portid][5] &= ~(1 << PinNum);
 8000584:	4913      	ldr	r1, [pc, #76]	; (80005d4 <GPIO_WritePin+0xc8>)
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	440b      	add	r3, r1
 8000592:	3314      	adds	r3, #20
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	2201      	movs	r2, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	43db      	mvns	r3, r3
 80005a2:	461c      	mov	r4, r3
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <GPIO_WritePin+0xc8>)
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	4403      	add	r3, r0
 80005b2:	3314      	adds	r3, #20
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	ea01 0204 	and.w	r2, r1, r4
 80005ba:	601a      	str	r2, [r3, #0]
        }
        result = OK;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e001      	b.n	80005c6 <GPIO_WritePin+0xba>
      } else {
        result = NOK;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]
      }
  return result;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc90      	pop	{r4, r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000

080005d8 <DMA_check>:

#include "GPIO.h"
#include "main.h"
#include "DMA.H"
void DMA_check()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	double_check();
 80005dc:	f7ff fe10 	bl	8000200 <double_check>
	*DMA_LIFCR |= (1<<4);
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <DMA_check+0x18>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <DMA_check+0x18>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40026408 	.word	0x40026408

080005f4 <main>:

int main(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af02      	add	r7, sp, #8
	GPIO_EnableClock(0);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fea6 	bl	800034c <GPIO_EnableClock>
	GPIO_Init(0, 5,OUTPUT, PUSH_PULL);
 8000600:	2300      	movs	r3, #0
 8000602:	2201      	movs	r2, #1
 8000604:	2105      	movs	r1, #5
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff fec2 	bl	8000390 <GPIO_Init>
	GPIO_Init(0, 6,OUTPUT, PUSH_PULL);
 800060c:	2300      	movs	r3, #0
 800060e:	2201      	movs	r2, #1
 8000610:	2106      	movs	r1, #6
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff febc 	bl	8000390 <GPIO_Init>
	GPIO_Init(0, 7,OUTPUT, PUSH_PULL);
 8000618:	2300      	movs	r3, #0
 800061a:	2201      	movs	r2, #1
 800061c:	2107      	movs	r1, #7
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff feb6 	bl	8000390 <GPIO_Init>

	DMA_init();
 8000624:	f7ff fdd6 	bl	80001d4 <DMA_init>
	DMA_param(source,destination,10,WORD,M_M,SINGLE) ;
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	220a      	movs	r2, #10
 8000634:	4903      	ldr	r1, [pc, #12]	; (8000644 <main+0x50>)
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x54>)
 8000638:	f7ff fdf4 	bl	8000224 <DMA_param>

	DMA_start();
 800063c:	f7ff fe6c 	bl	8000318 <DMA_start>
	//*DMA_S0FCR  &= ~(0x03);				// select the threshold to be 1/4 FIFO




  while (1){
 8000640:	e7fe      	b.n	8000640 <main+0x4c>
 8000642:	bf00      	nop
 8000644:	20000084 	.word	0x20000084
 8000648:	20000050 	.word	0x20000050

0800064c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <SystemInit+0x20>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <SystemInit+0x20>)
 8000658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000676:	490e      	ldr	r1, [pc, #56]	; (80006b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800068c:	4c0b      	ldr	r4, [pc, #44]	; (80006bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800069a:	f7ff ffd7 	bl	800064c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069e:	f000 f811 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006a2:	f7ff ffa7 	bl	80005f4 <main>
  bx  lr    
 80006a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006b4:	0800072c 	.word	0x0800072c
  ldr r2, =_sbss
 80006b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006bc:	2000009c 	.word	0x2000009c

080006c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC_IRQHandler>
	...

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4d0d      	ldr	r5, [pc, #52]	; (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	; (8000700 <__libc_init_array+0x3c>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2600      	movs	r6, #0
 80006d0:	42a6      	cmp	r6, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4d0b      	ldr	r5, [pc, #44]	; (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	; (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 f818 	bl	800070c <_init>
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2600      	movs	r6, #0
 80006e2:	42a6      	cmp	r6, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ec:	4798      	blx	r3
 80006ee:	3601      	adds	r6, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f6:	4798      	blx	r3
 80006f8:	3601      	adds	r6, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	08000724 	.word	0x08000724
 8000700:	08000724 	.word	0x08000724
 8000704:	08000724 	.word	0x08000724
 8000708:	08000728 	.word	0x08000728

0800070c <_init>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr

08000718 <_fini>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	bf00      	nop
 800071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071e:	bc08      	pop	{r3}
 8000720:	469e      	mov	lr, r3
 8000722:	4770      	bx	lr
